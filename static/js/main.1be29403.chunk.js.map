{"version":3,"sources":["DSVImporter/Components/HeaderBar.tsx","DSVImporter/Components/StepperComponent.tsx","DSVImporter/Interfaces/ColumnType.ts","DSVImporter/Interfaces/Step.ts","DSVImporter/Components/TableView.tsx","DSVImporter/Components/UploadComponent.tsx","DSVImporter/Interfaces/DatasetInfo.ts","DSVImporter/Interfaces/Separator.ts","DSVImporter/Components/DetailsForm.tsx","DSVImporter/Components/Content.tsx","DSVImporter/DSVImporter.tsx","DSVImporter/index.tsx","serviceWorker.ts","index.tsx","DSVImporter/dsvimporter.module.css"],"names":["useStyles","makeStyles","theme","createStyles","root","flexGrow","appBar","background","gray","title","margin","spacing","color","HeaderBar","classes","className","AppBar","elevation","position","Toolbar","Typography","variant","aria-label","StepperComponent","activeStep","steps","slice","Stepper","stepper","map","step","index","Step","key","label","StepLabel","_","width","backgroundColor","ColumnTypeMap","number","set","categorical","ReverseColumnTypeMap","Number","Label","Set","Categorical","getColumnType","arr","isNumericArray","uniqueVals","length","isSetArray","isDecimalArray","isCategoricalArray","every","isNaN","some","i","StepType","TableView","data","handleColumnTypeChange","SEP","Math","random","toFixed","rows","columns","columnTypeMap","useState","colTypeMap","setColTypeMap","size","filteredRows","r","idx","TableContainer","component","Paper","Table","TableHead","TableRow","col","TableCell","align","Select","value","onChange","event","target","MenuItem","TableBody","row","colSpan","Grid","style","padding","container","justify","alignItems","item","xs","Button","endIcon","onClick","UploadComponent","setSeparator","selectedSeparator","handleFileUpload","file","setFile","FormControl","InputLabel","htmlFor","Input","id","type","files","disabled","height","isValidEmail","email","test","String","toLowerCase","SeparatorMap","semicolon","colon","space","tab","comma","DetailsForm","datasetInfo","handleFormSubmission","uploadComplete","di","setDi","firstError","setFirstError","emailError","setEmailError","useEffect","display","onSubmit","preventDefault","sm","TextField","username","required","name","fullWidth","helperText","error","placeholder","author","source","description","multiline","Content","setData","setUploadComplete","rawData","setRawData","header","separator","skip","meta","sets","setDatasetInfo","goToNextStep","useContext","MyContext","sep","dsvFormat","parse","forEach","readDataset","val","UPLOAD","Object","keys","k","find","reader","FileReader","onload","result","readAsText","COLUMNS","columnMap","dinfo","setIndices","undefined","filter","x","attributeIndices","consecutiveSets","reduce","results","push","s","format","start","end","attrId","metadata","values","d","parseFloat","min","max","v","parseInt","JSON","stringify","getSetInfo","info","formData","FormData","append","axios","post","DATA_SERVER_STRING","then","catch","err","console","Container","Snackbar","open","SnackbarContent","green","message","overflow","gridTemplateRows","createContext","goBackOneStep","DSVImporter","setActiveStep","instructions","FINISH","styles","layout_div","CssBaseline","Provider","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.1be29403.chunk.js","sourcesContent":["import React, {FC} from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport {makeStyles, Theme, createStyles} from '@material-ui/core/styles';\nimport gray from '@material-ui/core/colors/grey';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n    },\n    appBar: {\n      background: gray[50],\n    },\n    title: {\n      flexGrow: 1,\n      margin: theme.spacing(3),\n      color: gray[900],\n    },\n  }),\n);\n\ninterface OwnProps {}\n\ntype Props = OwnProps;\n\nconst HeaderBar: FC<Props> = () => {\n  const classes = useStyles({});\n\n  return (\n    <div className={classes.root}>\n      <AppBar elevation={0} position=\"static\" className={classes.appBar}>\n        <Toolbar>\n          <Typography\n            variant=\"h3\"\n            className={classes.title}\n            color=\"inherit\"\n            aria-label=\"menu\">\n            Upload your data\n          </Typography>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n};\n\nexport default HeaderBar;\n","import React, {FC} from 'react';\nimport {makeStyles, Theme, createStyles} from '@material-ui/core/styles';\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepLabel from '@material-ui/core/StepLabel';\nimport gray from '@material-ui/core/colors/grey';\nimport {Steps} from '../Interfaces/Step';\n\ninterface Props {\n  activeStep: number;\n  steps: Steps;\n}\n\nconst StepperComponent: FC<Props> = ({activeStep, steps}: Props) => {\n  const classes = useStyles({});\n\n  steps = steps.slice(0, 3);\n\n  return (\n    <div className={classes.root}>\n      <Stepper className={classes.stepper} activeStep={activeStep}>\n        {steps.map((step, index) => {\n          return (\n            <Step key={`${step.label}${index}`}>\n              <StepLabel>{step.label}</StepLabel>\n            </Step>\n          );\n        })}\n      </Stepper>\n    </div>\n  );\n};\n\nexport default StepperComponent;\n\nconst useStyles = makeStyles((_: Theme) =>\n  createStyles({\n    root: {\n      width: '100%',\n    },\n    stepper: {\n      backgroundColor: gray[50],\n    },\n  }),\n);\n","export type ColumnTypeKeys =\n  | 'number'\n  | 'label'\n  | 'set'\n  | 'set-list'\n  | 'categorical';\n\nexport type ColumnTypeValues =\n  | 'Number'\n  | 'Label'\n  | 'Set'\n  | 'Set List'\n  | 'Categorical';\n\nexport const ColumnTypeMap: {[K in ColumnTypeKeys]: ColumnTypeValues} = {\n  number: 'Number',\n  label: 'Label',\n  set: 'Set',\n  'set-list': 'Set List',\n  categorical: 'Categorical',\n};\n\nexport const ReverseColumnTypeMap: {[K in ColumnTypeValues]: ColumnTypeKeys} = {\n  Number: 'number',\n  Label: 'label',\n  Set: 'set',\n  'Set List': 'set-list',\n  Categorical: 'categorical',\n};\n\nexport type ColumnMap = {[key: string]: ColumnTypeValues};\n\nexport function getColumnType(arr: any[]): ColumnTypeValues {\n  if (isNumericArray(arr)) {\n    if (isSetArray(arr)) return 'Set';\n    if (isDecimalArray(arr)) return 'Number';\n    if (isCategoricalArray(arr)) return 'Categorical';\n    return 'Number';\n  }\n  if (isCategoricalArray(arr)) return 'Categorical';\n  return 'Label';\n}\n\nexport function isNumericArray(arr: any[]) {\n  return !arr.every(isNaN);\n}\n\nexport function isDecimalArray(arr: any[]) {\n  return arr.some(i => i % 1 !== 0);\n}\n\n// function isTextArray(arr: any[]) {\n//   return arr.some(isNaN);\n// }\n\nfunction isSetArray(arr: any[]) {\n  let uniqueVals = [...new Set(arr)];\n  return uniqueVals.length > 0 && uniqueVals.length <= 2;\n}\n\nfunction isCategoricalArray(arr: any[]) {\n  let uniqueVals = [...new Set(arr)];\n  return uniqueVals.length > 0 && uniqueVals.length < 10;\n}\n\n// function isSetList(arr: any[], sep: string) {\n//   return arr.some(i => i.includes(sep));\n// }\n","export enum StepType {\n  UPLOAD = 'UPLOAD',\n  COLUMNS = 'COLUMNS',\n  FINISH = 'FINISH',\n}\n\nexport type Step = {\n  label: string;\n  instructions: string;\n  type: StepType;\n};\n\nexport type Steps = Step[];\n\nexport const getSteps = (): Steps => [\n  {\n    label: 'Upload dataset',\n    instructions:\n      'Please upload the file with dataset. We support any delimiter separated file format (e.g. csv, tsv, etc.)',\n    type: StepType.UPLOAD,\n  },\n  {\n    label: 'Set Column Types',\n    instructions:\n      'Select the proper column types. Important ones are the columns which show set membership',\n    type: StepType.COLUMNS,\n  },\n  {\n    label: 'Finish',\n    instructions: 'Fill in the details, and click upload.',\n    type: StepType.FINISH,\n  },\n  {\n    label: 'Finish',\n    instructions: 'Fill in the details, and click upload.',\n    type: StepType.FINISH,\n  },\n];\n","import React, {FC, ChangeEvent, useState} from 'react';\nimport Table from '@material-ui/core/Table';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport Paper from '@material-ui/core/Paper';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableBody from '@material-ui/core/TableBody';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport Data from '../Interfaces/Data';\nimport {\n  ReverseColumnTypeMap,\n  ColumnTypeMap,\n  ColumnTypeKeys,\n  ColumnMap,\n} from '../Interfaces/ColumnType';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\n\ninterface Props {\n  data: Data;\n  handleColumnTypeChange: (colMap: ColumnMap) => void;\n}\n\nconst TableView: FC<Props> = ({data, handleColumnTypeChange}: Props) => {\n  const SEP = Math.random().toFixed(5);\n\n  const {rows, columns, columnTypeMap} = data;\n\n  const [colTypeMap, setColTypeMap] = useState<ColumnMap>(columnTypeMap);\n\n  const size = rows.length;\n  let filteredRows: any[] = rows.map((r: any, idx: number) => ({idx, ...r}));\n  if (size > 60)\n    filteredRows = [\n      ...filteredRows.slice(0, 30),\n      ...[{[SEP]: SEP}],\n      ...filteredRows.slice(size - 30, size),\n    ];\n\n  return (\n    <>\n      <TableContainer component={Paper}>\n        <Table aria-label=\"simple table\">\n          <TableHead>\n            <TableRow>\n              {['', ...columns].map(col => (\n                <TableCell key={col} align=\"center\">\n                  {col}\n                  {col.length > 0 && (\n                    <Select\n                      value={ReverseColumnTypeMap[colTypeMap[col]]}\n                      onChange={(event: ChangeEvent<{value: any}>) => {\n                        setColTypeMap({\n                          ...colTypeMap,\n                          [col]:\n                            ColumnTypeMap[event.target.value as ColumnTypeKeys],\n                        });\n                      }}>\n                      <MenuItem value=\"number\">Number</MenuItem>\n                      <MenuItem value=\"label\">Label</MenuItem>\n                      <MenuItem value=\"set\">Set</MenuItem>\n                      <MenuItem value=\"set-list\">Set List</MenuItem>\n                      <MenuItem value=\"categorical\">Categorical</MenuItem>\n                    </Select>\n                  )}\n                </TableCell>\n              ))}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {filteredRows.map((row: any, idx: number) => {\n              return row[SEP] && row[SEP] === SEP ? (\n                <TableRow key={idx}>\n                  <TableCell colSpan={columns.length - 1}>...</TableCell>\n                </TableRow>\n              ) : (\n                <TableRow key={idx}>\n                  {['idx', ...columns].map(col => (\n                    <TableCell key={col} align=\"center\">\n                      {row[col]}\n                    </TableCell>\n                  ))}\n                </TableRow>\n              );\n            })}\n          </TableBody>\n        </Table>\n      </TableContainer>\n      <Grid\n        style={{padding: '0.75em'}}\n        container\n        justify=\"center\"\n        alignItems=\"center\">\n        <Grid container item xs justify=\"center\" alignItems=\"center\"></Grid>\n        <Grid container item xs justify=\"center\" alignItems=\"center\" />\n        <Grid container item xs justify=\"center\" alignItems=\"center\">\n          <Button\n            endIcon={<ChevronRightIcon></ChevronRightIcon>}\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={() => {\n              handleColumnTypeChange(colTypeMap);\n            }}>\n            Next\n          </Button>\n        </Grid>\n      </Grid>\n    </>\n  );\n};\n\nexport default TableView;\n","import React, {FC, useState, ChangeEvent} from 'react';\nimport Input from '@material-ui/core/Input';\nimport Grid from '@material-ui/core/Grid';\nimport {makeStyles, Theme, createStyles} from '@material-ui/core/styles';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport {Separators} from '../Interfaces/Separator';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport Button from '@material-ui/core/Button';\n\ninterface Props {\n  selectedSeparator: Separators;\n  setSeparator: (sep: Separators) => void;\n  handleFileUpload: (file: File) => void;\n}\n\nconst UploadComponent: FC<Props> = ({\n  setSeparator,\n  selectedSeparator,\n  handleFileUpload,\n}: Props) => {\n  const classes = useStyles({});\n\n  const [file, setFile] = useState<File>(null as any);\n\n  return (\n    <Grid\n      className={classes.root}\n      container\n      justify=\"center\"\n      alignItems=\"center\"\n      spacing={3}>\n      <Grid item>\n        <FormControl>\n          <InputLabel htmlFor=\"file-upload\"></InputLabel>\n          <Input\n            id=\"file-upload\"\n            type=\"file\"\n            onChange={(event: any) => {\n              setFile(event.target.files[0]);\n            }}></Input>\n        </FormControl>\n      </Grid>\n      <Grid item>\n        <FormControl>\n          <InputLabel>Separator</InputLabel>\n          <Select\n            value={selectedSeparator}\n            onChange={(event: ChangeEvent<{value: any}>) => {\n              setSeparator(event.target.value);\n            }}>\n            <MenuItem value=\"semicolon\">Semicolon ;</MenuItem>\n            <MenuItem value=\"colon\">Colon :</MenuItem>\n            <MenuItem value=\"tab\">Tab \\t</MenuItem>\n            <MenuItem value=\"comma\">Comma ,</MenuItem>\n            <MenuItem value=\"space\">Space</MenuItem>\n          </Select>\n        </FormControl>\n      </Grid>\n      <Grid item>\n        <FormControl>\n          <Button\n            disabled={file === null}\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={() => {\n              handleFileUpload(file);\n            }}\n            endIcon={<ChevronRightIcon></ChevronRightIcon>}>\n            Next\n          </Button>\n        </FormControl>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default UploadComponent;\n\nconst useStyles = makeStyles((_: Theme) =>\n  createStyles({\n    root: {\n      height: '100%',\n      width: '100%',\n    },\n  }),\n);\n","export type MetaData = {\n  type: string;\n  index: number;\n  name: string;\n  min?: number;\n  max?: number;\n};\n\nexport type SetInfo = {\n  format: string;\n  start: number;\n  end: number;\n};\n\nexport type DatasetInfo = {\n  username: string;\n  email: string;\n  file: string;\n  name: string;\n  header: number;\n  separator: string;\n  skip: number;\n  meta: Array<MetaData>;\n  sets: Array<SetInfo>;\n  author: string;\n  description: string;\n  source: string;\n};\n\nexport function isValidEmail(email: string) {\n  var re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  return re.test(String(email).toLowerCase());\n}\n\nexport function getDefaultDatasetInfo(): DatasetInfo {\n  return {\n    username: '',\n    email: '',\n    file: '',\n    name: '',\n    header: 0,\n    separator: ';',\n    skip: -1,\n    meta: [],\n    sets: [],\n    author: '',\n    description: '',\n    source: '',\n  };\n}\n","export type Separators = 'semicolon' | 'colon' | 'space' | 'tab' | 'comma';\n\nexport const SeparatorMap: {[key in Separators]: string} = {\n  semicolon: ';',\n  colon: ':',\n  space: ' ',\n  tab: '\\t',\n  comma: ',',\n};\n\nexport function getSeparator(val: string): Separators {\n  return (Object.keys(SeparatorMap)\n    .map((k: any) => SeparatorMap[k as Separators])\n    .find((value: string) => {\n      if (value === val) return true;\n      return false;\n    }) || ['semicolon', ';'])[0] as Separators;\n}\n","import React, {FC, useState, ChangeEvent, useEffect} from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Grid from '@material-ui/core/Grid';\nimport {DatasetInfo, isValidEmail} from '../Interfaces/DatasetInfo';\n\ninterface Props {\n  datasetInfo: DatasetInfo;\n  handleFormSubmission: (info: DatasetInfo) => void;\n  uploadComplete: boolean;\n}\n\nconst DetailsForm: FC<Props> = ({\n  datasetInfo,\n  handleFormSubmission,\n  uploadComplete,\n}: Props) => {\n  const [di, setDi] = useState<DatasetInfo>(datasetInfo);\n  const [firstError, setFirstError] = useState(true);\n  const [emailError, setEmailError] = useState(false);\n\n  const email = di.email;\n\n  const handleSubmit = (event: any) => {\n    event.preventDefault();\n    if (!isValidEmail(di.email)) {\n      setEmailError(true);\n      setFirstError(false);\n      return;\n    } else {\n      handleFormSubmission(di);\n    }\n  };\n\n  useEffect(() => {\n    if (!firstError) setEmailError(!isValidEmail(email));\n  }, [firstError, email]);\n\n  return (\n    <Grid container justify=\"center\" alignItems=\"center\">\n      <form style={{display: 'table'}} onSubmit={handleSubmit}>\n        <Grid container justify=\"center\" alignItems=\"center\">\n          <Grid style={{width: '75%'}} container spacing={5}>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                onChange={(event: ChangeEvent<{value: string}>) => {\n                  setDi({...di, username: event.target.value});\n                }}\n                value={di.username}\n                required\n                id=\"name\"\n                name=\"name\"\n                label=\"Name\"\n                variant=\"outlined\"\n                fullWidth\n              />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                onChange={(event: ChangeEvent<{value: string}>) => {\n                  setDi({...di, email: event.target.value});\n                }}\n                required\n                value={di.email}\n                id=\"email\"\n                name=\"email\"\n                label=\"Email\"\n                variant=\"outlined\"\n                helperText={emailError ? 'Please enter a valid email id.' : ''}\n                error={emailError}\n                fullWidth\n              />\n            </Grid>\n            <Grid item xs={12} sm={4}>\n              <TextField\n                onChange={(event: ChangeEvent<{value: string}>) => {\n                  setDi({...di, name: event.target.value});\n                }}\n                required\n                value={di.name}\n                id=\"dataset-name\"\n                name=\"dataset-name\"\n                label=\"Dataset Name\"\n                variant=\"outlined\"\n                placeholder=\"Name of the dataset\"\n                fullWidth\n              />\n            </Grid>\n            <Grid item xs={12} sm={4}>\n              <TextField\n                onChange={(event: ChangeEvent<{value: string}>) => {\n                  setDi({...di, author: event.target.value});\n                }}\n                value={di.author}\n                id=\"author\"\n                name=\"author\"\n                label=\"Author\"\n                variant=\"outlined\"\n                placeholder=\"Organizations/Persons\"\n                fullWidth\n              />\n            </Grid>\n            <Grid item xs={12} sm={4}>\n              <TextField\n                onChange={(event: ChangeEvent<{value: string}>) => {\n                  setDi({...di, source: event.target.value});\n                }}\n                value={di.source}\n                id=\"source\"\n                name=\"source\"\n                label=\"Source\"\n                variant=\"outlined\"\n                placeholder=\"URL/Name if applicable\"\n                fullWidth\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                onChange={(event: ChangeEvent<{value: string}>) => {\n                  setDi({...di, description: event.target.value});\n                }}\n                value={di.description}\n                id=\"description\"\n                name=\"description\"\n                label=\"Description\"\n                variant=\"outlined\"\n                placeholder=\"Please describe the dataset\"\n                multiline\n                rows=\"4\"\n                fullWidth></TextField>\n            </Grid>\n            <Grid container item xs={12} justify=\"center\">\n              <Button\n                disabled={uploadComplete}\n                type=\"submit\"\n                variant=\"contained\"\n                color=\"primary\">\n                Submit\n              </Button>\n            </Grid>\n          </Grid>\n        </Grid>\n      </form>\n    </Grid>\n  );\n};\n\nexport default DetailsForm;\n","import React, {FC, useState, useContext} from 'react';\nimport {makeStyles, Theme, createStyles} from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport TableView from './TableView';\nimport UploadComponent from './UploadComponent';\nimport {StepType} from '../Interfaces/Step';\nimport Data from '../Interfaces/Data';\nimport {dsvFormat} from 'd3';\nimport {\n  DatasetInfo,\n  getDefaultDatasetInfo,\n  SetInfo,\n  MetaData,\n} from '../Interfaces/DatasetInfo';\nimport {Separators, SeparatorMap, getSeparator} from '../Interfaces/Separator';\nimport {\n  ColumnMap,\n  getColumnType,\n  ColumnTypeMap,\n  isNumericArray,\n  isDecimalArray,\n} from '../Interfaces/ColumnType';\nimport {MyContext, DATA_SERVER_STRING} from '../DSVImporter';\nimport DetailsForm from './DetailsForm';\nimport axios from 'axios';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport SnackbarContent from '@material-ui/core/SnackbarContent';\nimport {green} from '@material-ui/core/colors';\n\ninterface Props {\n  step: StepType;\n}\n\nconst Content: FC<Props> = ({step}: Props) => {\n  const classes = useStyles({});\n  const [data, setData] = useState<Data>({\n    rows: [],\n    columns: [],\n    columnTypeMap: {},\n  });\n  const [uploadComplete, setUploadComplete] = useState(false);\n  const [file, setFile] = useState<File>(null as any);\n  const [rawData, setRawData] = useState<string>('');\n  const [datasetInfo, setDatasetInfo] = useState<DatasetInfo>(\n    getDefaultDatasetInfo(),\n  );\n\n  let component: any;\n\n  const {goToNextStep} = useContext(MyContext);\n\n  const setSeparator = (sep: Separators) => {\n    setDatasetInfo({...datasetInfo, separator: SeparatorMap[sep]});\n  };\n\n  const handleFileUpload = (file: File) => {\n    if (file && rawData === '' && step === StepType.UPLOAD) {\n      const reader = new FileReader();\n      reader.onload = function(event: any) {\n        setRawData(event.target.result);\n        setFile(file);\n        goToNextStep();\n      };\n      reader.readAsText(file);\n    }\n  };\n\n  if (rawData !== '' && (data.rows.length === 0 || data.columns.length === 0)) {\n    setData(readDataset(rawData, datasetInfo.separator));\n  }\n\n  const handleColumnTypeChange = (columnMap: ColumnMap) => {\n    const dinfo = getSetInfo(datasetInfo, data, columnMap);\n    setDatasetInfo({...dinfo});\n    goToNextStep();\n  };\n\n  const handleFormSubmission = (info: DatasetInfo) => {\n    const formData = new FormData();\n\n    formData.append('data', file);\n    formData.append('metadata', JSON.stringify(info));\n\n    axios\n      .post(`${DATA_SERVER_STRING}upload`, formData)\n      .then(() => {\n        setUploadComplete(true);\n        goToNextStep();\n      })\n      .catch(err => {\n        console.error(err);\n      });\n  };\n\n  if (step === StepType.UPLOAD)\n    component = (\n      <UploadComponent\n        setSeparator={setSeparator}\n        selectedSeparator={getSeparator(datasetInfo.separator)}\n        handleFileUpload={handleFileUpload}\n      />\n    );\n  else if (step === StepType.COLUMNS)\n    component = (\n      <TableView handleColumnTypeChange={handleColumnTypeChange} data={data} />\n    );\n  else\n    component = (\n      <DetailsForm\n        datasetInfo={datasetInfo}\n        uploadComplete={uploadComplete}\n        handleFormSubmission={handleFormSubmission}></DetailsForm>\n    );\n\n  return (\n    <Container className={classes.root}>\n      {component}\n      {\n        <Snackbar open={uploadComplete}>\n          <SnackbarContent\n            style={{backgroundColor: green[600]}}\n            message=\"File uploaded successfully!\"\n          />\n        </Snackbar>\n      }\n    </Container>\n  );\n};\n\nexport default Content;\n\nconst useStyles = makeStyles((_: Theme) =>\n  createStyles({\n    root: {\n      height: '100%',\n      width: '100%',\n      overflow: 'auto',\n      padding: 0,\n      display: 'grid',\n      gridTemplateRows: 'auto min-content',\n    },\n  }),\n);\n\nfunction getSetInfo(\n  datasetInfo: DatasetInfo,\n  data: Data,\n  columnMap: ColumnMap,\n): DatasetInfo {\n  const setIndices = data.columns\n    .map((col, idx) =>\n      columnMap[col] === ColumnTypeMap['set'] ? idx : undefined,\n    )\n    .filter(x => x !== undefined) as number[];\n\n  const attributeIndices = data.columns\n    .map((col, idx) =>\n      columnMap[col] !== ColumnTypeMap['set'] ? idx : undefined,\n    )\n    .filter(x => x !== undefined) as number[];\n\n  let consecutiveSets = setIndices.reduce(\n    (results: any, item: any, idx: any, arr: any) => {\n      if (item !== undefined) {\n        if (arr[idx - 1] === undefined || arr[idx - 1] + 1 !== item)\n          results.push([]);\n        results[results.length - 1].push(item);\n      }\n      return results;\n    },\n    [],\n  );\n\n  const sets: SetInfo[] = [];\n\n  consecutiveSets.forEach((s: number[]) => {\n    sets.push({\n      format: 'binary',\n      start: s[0],\n      end: s[s.length - 1],\n    });\n  });\n\n  const meta: MetaData[] = [];\n\n  attributeIndices.forEach((attrId: number) => {\n    let metadata: MetaData = {\n      type: 'string',\n      index: attrId,\n      name: data.columns[attrId],\n    };\n\n    if (columnMap[metadata.name] === ColumnTypeMap['label']) {\n      metadata.type = 'id';\n      meta.push(metadata);\n      return;\n    }\n\n    const values = data.rows.map(d => d[metadata.name]);\n    if (isNumericArray(values)) {\n      if (isDecimalArray(values.map(parseFloat))) {\n        metadata.type = 'float';\n        metadata.min = Math.min(...values.map(parseFloat));\n        metadata.max = Math.max(...values.map(parseFloat));\n      } else {\n        metadata.type = 'integer';\n        metadata.min = Math.min(...values.map(v => parseInt(v, 10)));\n        metadata.max = Math.max(...values.map(v => parseInt(v, 10)));\n      }\n    }\n\n    meta.push(metadata);\n  });\n\n  return JSON.parse(JSON.stringify({...datasetInfo, sets, meta}));\n}\n\nfunction readDataset(rawData: string, sep: string): Data {\n  const dsv = dsvFormat(sep);\n\n  const data = dsv.parse(rawData);\n\n  const rows = [...data];\n  const columns = data.columns;\n\n  const columnTypeMap: ColumnMap = {};\n\n  columns.forEach(col => {\n    const arr = rows.map((r: any) => r[col]);\n    columnTypeMap[col] = getColumnType(arr);\n  });\n\n  return {rows, columns, columnTypeMap};\n}\n","import React, {useState, createContext} from 'react';\nimport HeaderBar from './Components/HeaderBar';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport StepperComponent from './Components/StepperComponent';\nimport styles from './dsvimporter.module.css';\nimport Content from './Components/Content';\nimport {getSteps} from './Interfaces/Step';\n\nexport const DATA_SERVER_STRING =\n  'http://us-central1-upset2-eaf80.cloudfunctions.net/api/';\n\nexport const MyContext = createContext({\n  goBackOneStep: () => {},\n  goToNextStep: () => {},\n});\n\nconst DSVImporter: React.FC = () => {\n  const [activeStep, setActiveStep] = useState(0);\n\n  const steps = getSteps();\n\n  const goToNextStep = () => setActiveStep(activeStep + 1);\n\n  const goBackOneStep = () => setActiveStep(activeStep - 1);\n\n  return (\n    <div className={styles.layout_div}>\n      <CssBaseline></CssBaseline>\n      <HeaderBar></HeaderBar>\n      <StepperComponent\n        activeStep={activeStep}\n        steps={steps}></StepperComponent>\n      <MyContext.Provider value={{goToNextStep, goBackOneStep}}>\n        <Content step={steps[activeStep].type}></Content>\n      </MyContext.Provider>\n    </div>\n  );\n};\n\nexport default DSVImporter;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport DSVImporter from './DSVImporter';\nimport 'typeface-roboto';\n\nexport default DSVImporter;\n\nexport function createDSVImporter(node: HTMLElement) {\n  ReactDOM.render(<DSVImporter />, node);\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport DSVImporter from './DSVImporter';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<DSVImporter />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"layout_div\":\"dsvimporter_layout_div__O_DOw\"};"],"sourceRoot":""}